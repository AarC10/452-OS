#ifndef FONT8X8_H_
#define FONT8X8_H_

#include <common.h>

/**
 * @brief 8×8 pixel font (ASCII subset).
 *
 * font8x8_basic[c] gives an 8-byte bitmap for character c (only ' ' (32),
 * '0'–'9' (48–57) and 'A'–'Z' (65–90) are filled; other codes render blank).
 * Bit-0 of each byte is leftmost pixel.
 */
static const uint8_t font8x8_basic[128][8] = {
    [32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // ' '
    [48] = {0x3C, 0x66, 0x6E, 0x76, 0x66, 0x66, 0x3C, 0x00}, // '0'
    [49] = {0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00}, // '1'
    [50] = {0x3C, 0x66, 0x06, 0x1C, 0x30, 0x60, 0x7E, 0x00}, // '2'
    [51] = {0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00}, // '3'
    [52] = {0x0C, 0x1C, 0x2C, 0x4C, 0x7E, 0x0C, 0x1E, 0x00}, // '4'
    [53] = {0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00}, // '5'
    [54] = {0x3C, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x3C, 0x00}, // '6'
    [55] = {0x7E, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00}, // '7'
    [56] = {0x3C, 0x66, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00}, // '8'
    [57] = {0x3C, 0x66, 0x66, 0x3E, 0x06, 0x0C, 0x38, 0x00}, // '9'
    [65] = {0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00}, // 'A'
    [66] = {0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00}, // 'B'
    [67] = {0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00}, // 'C'
    [68] = {0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00}, // 'D'
    [69] = {0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00}, // 'E'
    [70] = {0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x00}, // 'F'
    [71] = {0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00}, // 'G'
    [72] = {0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00}, // 'H'
    [73] = {0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00}, // 'I'
    [74] = {0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00}, // 'J'
    [75] = {0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00}, // 'K'
    [76] = {0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00}, // 'L'
    [77] = {0x63, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x63, 0x00}, // 'M'
    [78] = {0x66, 0x76, 0x7E, 0x6E, 0x66, 0x66, 0x66, 0x00}, // 'N'
    [79] = {0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00}, // 'O'
    [80] = {0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00}, // 'P'
    [81] = {0x3C, 0x66, 0x66, 0x66, 0x6E, 0x6C, 0x36, 0x00}, // 'Q'
    [82] = {0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0x00}, // 'R'
    [83] = {0x3C, 0x66, 0x30, 0x1C, 0x06, 0x66, 0x3C, 0x00}, // 'S'
    [84] = {0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00}, // 'T'
    [85] = {0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00}, // 'U'
    [86] = {0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00}, // 'V'
    [87] = {0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00}, // 'W'
    [88] = {0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00}, // 'X'
    [89] = {0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x00}, // 'Y'
    [90] = {0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00}, // 'Z'
};

/**
 * @brief Map lowercase to uppercase (c in [97..122]) or pass others through.
 */
static inline const uint8_t *font8x8_get(char c)
{
    uint8_t uc = (uint8_t)c;
    if (uc >= 'a' && uc <= 'z')
        uc -= 32;
    if (uc < 128)
        return font8x8_basic[uc];
    return font8x8_basic[0]; // fall back to space
}

#endif // FONT8X8_H_
